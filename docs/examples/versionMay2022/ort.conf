ort {
  licenseFilePatterns {
    patentFilenames = ["patents"]
	rootLicenseFilenames = ["readme*"]
    licenseFilenames = [
          "license*",
          "licence*",
          "*.license",
          "*.licence",
          "unlicense",
          "unlicence",
          "copying*",
          "copyright",
          "notice",
          "notice*",
          "**/license*",
          "**/licence*",
          "**/*.license",
          "**/*.licence",
          "**/unlicense",
          "**/unlicence",
          "**/copying*",
          "**/copyright",
          "**/notice",
          "**/notice*",
      ]
  }
  scanner {
	options {
		ScanCode {
			commandLine = "--copyright --license --license-text --ignore *.ort.yml --info --strip-root --timeout 300 --ignore HERE_NOTICE --ignore META-INF/DEPENDENCIES --json [yourScannerDetailsDirectory]/{rawFileName}.json"
		}
	}
	storages {
      local {
        backend {
          localFileStorage {
            directory = "[yourFileStorageDirectory]"
            compression = false
          }
        }
      }
	}
	  
    storageReaders: [
      "local"
    ]

    storageWriters: [
      "local"
    ]
	  
    archive {
      fileStorage {
        localFileStorage {
          directory = "[yourScannerArchiveDirectory]"
		  compression = false
        }
      }
    }
	createMissingArchives = true

	ignorePatterns = [
      "**/*.ort.yml",
      "**/*.spdx.yml",
      "**/*.spdx.yaml",
      "**/*.spdx.json",
      "**/META-INF/DEPENDENCIES"
    ]
  }
	oscake {
		prettyPrint = true
		curator {
			directory = "[yourDirectoryForThePackages]"
			fileStore = "[yourDirectoryForTheLicenseFiles]"
			issueLevel = 2	# -1..not enabled, 0..ERROR, 1..WARN + ERROR, 2..INFO + WARN + ERROR
		},
		deduplicator {
			keepEmptyScopes = false
			createUnifiedCopyrights = true
			preserveFileScopes = false
			compareOnlyDistinctLicensesCopyrights = true
			processPackagesWithIssues = true
			hideSections = [] #["config", "reuselicensings", "dirlicensings", "filelicensings"]
		},
		resolver {
			directory = "[yourDirectoryForTheResolver]"
			issueLevel = 2	# -1..not enabled, 0..ERROR, 1..WARN + ERROR, 2..INFO + WARN + ERROR
		}
		selector {
			directory = "[yourDirectoryForTheSelector]"
			issueLevel = 2	# -1..not enabled, 0..ERROR, 1..WARN + ERROR, 2..INFO + WARN + ERROR
		}
		metadatamanager {
			distribution {
				enabled = true
				directory = "[yourDirectoryForMetaDataManagerDistribution]"
			}
			packageType {
				enabled = true
				directory = "[yourDirectoryForMetaDataManagerPackageType]"
			}
			issueLevel = 2	# -1..not enabled, 0..ERROR, 1..WARN + ERROR, 2..INFO + WARN + ERROR
		}

  }


}